// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: email/email.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Email struct {
	Creator               string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                    string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	From                  string   `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To                    string   `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	SenderSignature       string   `protobuf:"bytes,5,opt,name=senderSignature,proto3" json:"senderSignature,omitempty"`
	SenderAddressVersion  uint64   `protobuf:"varint,6,opt,name=senderAddressVersion,proto3" json:"senderAddressVersion,omitempty"`
	Subject               string   `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`
	Body                  string   `protobuf:"bytes,8,opt,name=body,proto3" json:"body,omitempty"`
	ReplyTo               string   `protobuf:"bytes,9,opt,name=replyTo,proto3" json:"replyTo,omitempty"`
	TrackIds              []string `protobuf:"bytes,11,rep,name=trackIds,proto3" json:"trackIds,omitempty"`
	SendedAt              string   `protobuf:"bytes,12,opt,name=sendedAt,proto3" json:"sendedAt,omitempty"`
	DecryptionKeys        []string `protobuf:"bytes,13,rep,name=decryptionKeys,proto3" json:"decryptionKeys,omitempty"`
	PreviousDecryptionKey string   `protobuf:"bytes,14,opt,name=previousDecryptionKey,proto3" json:"previousDecryptionKey,omitempty"`
}

func (m *Email) Reset()         { *m = Email{} }
func (m *Email) String() string { return proto.CompactTextString(m) }
func (*Email) ProtoMessage()    {}
func (*Email) Descriptor() ([]byte, []int) {
	return fileDescriptor_74366e5b77a2734d, []int{0}
}
func (m *Email) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Email) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Email.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Email) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Email.Merge(m, src)
}
func (m *Email) XXX_Size() int {
	return m.Size()
}
func (m *Email) XXX_DiscardUnknown() {
	xxx_messageInfo_Email.DiscardUnknown(m)
}

var xxx_messageInfo_Email proto.InternalMessageInfo

func (m *Email) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Email) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Email) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Email) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Email) GetSenderSignature() string {
	if m != nil {
		return m.SenderSignature
	}
	return ""
}

func (m *Email) GetSenderAddressVersion() uint64 {
	if m != nil {
		return m.SenderAddressVersion
	}
	return 0
}

func (m *Email) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Email) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Email) GetReplyTo() string {
	if m != nil {
		return m.ReplyTo
	}
	return ""
}

func (m *Email) GetTrackIds() []string {
	if m != nil {
		return m.TrackIds
	}
	return nil
}

func (m *Email) GetSendedAt() string {
	if m != nil {
		return m.SendedAt
	}
	return ""
}

func (m *Email) GetDecryptionKeys() []string {
	if m != nil {
		return m.DecryptionKeys
	}
	return nil
}

func (m *Email) GetPreviousDecryptionKey() string {
	if m != nil {
		return m.PreviousDecryptionKey
	}
	return ""
}

func init() {
	proto.RegisterType((*Email)(nil), "schrsi.demail.email.Email")
}

func init() { proto.RegisterFile("email/email.proto", fileDescriptor_74366e5b77a2734d) }

var fileDescriptor_74366e5b77a2734d = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xbd, 0x4e, 0xc3, 0x30,
	0x10, 0x6e, 0xfa, 0x5f, 0x03, 0x45, 0x18, 0x90, 0x4e, 0x0c, 0x51, 0xc5, 0x00, 0x59, 0x68, 0x24,
	0xe0, 0x05, 0x8a, 0x60, 0x40, 0x6c, 0x05, 0x31, 0xb0, 0x25, 0xf1, 0xd1, 0x1a, 0xda, 0x38, 0x3a,
	0x3b, 0x88, 0xbc, 0x05, 0xbc, 0x15, 0x63, 0x47, 0x46, 0xd4, 0xbe, 0x08, 0x8a, 0x5d, 0x2a, 0x54,
	0x75, 0x39, 0xdd, 0xf7, 0x73, 0xf6, 0x27, 0x7d, 0x6c, 0x0f, 0xa7, 0x91, 0x9c, 0x84, 0x76, 0xf6,
	0x33, 0x52, 0x46, 0xf1, 0x7d, 0x9d, 0x8c, 0x49, 0xcb, 0xbe, 0x70, 0xa4, 0x9d, 0xc7, 0x9f, 0x35,
	0xd6, 0xb8, 0x29, 0x37, 0x0e, 0xac, 0x95, 0x10, 0x46, 0x46, 0x11, 0x78, 0x3d, 0x2f, 0xe8, 0x0c,
	0xff, 0x20, 0xef, 0xb2, 0xaa, 0x14, 0x50, 0xb5, 0x64, 0x55, 0x0a, 0xce, 0x59, 0xfd, 0x99, 0xd4,
	0x14, 0x6a, 0x96, 0xb1, 0x7b, 0xe9, 0x31, 0x0a, 0xea, 0xce, 0x63, 0x14, 0x0f, 0xd8, 0xae, 0xc6,
	0x54, 0x20, 0xdd, 0xcb, 0x51, 0x1a, 0x99, 0x9c, 0x10, 0x1a, 0x56, 0x5c, 0xa7, 0xf9, 0x39, 0x3b,
	0x70, 0xd4, 0x40, 0x08, 0x42, 0xad, 0x1f, 0x91, 0xb4, 0x54, 0x29, 0x34, 0x7b, 0x5e, 0x50, 0x1f,
	0x6e, 0xd4, 0xca, 0xac, 0x3a, 0x8f, 0x5f, 0x30, 0x31, 0xd0, 0x72, 0x59, 0x97, 0xb0, 0xcc, 0x16,
	0x2b, 0x51, 0x40, 0xdb, 0x65, 0x2b, 0xf7, 0xd2, 0x4d, 0x98, 0x4d, 0x8a, 0x07, 0x05, 0x1d, 0xe7,
	0x5e, 0x42, 0x7e, 0xc4, 0xda, 0x86, 0xa2, 0xe4, 0xf5, 0x56, 0x68, 0xd8, 0xea, 0xd5, 0x82, 0xce,
	0x70, 0x85, 0x4b, 0xcd, 0xfe, 0x2d, 0x06, 0x06, 0xb6, 0xed, 0xd9, 0x0a, 0xf3, 0x13, 0xd6, 0x15,
	0x98, 0x50, 0x91, 0x19, 0xa9, 0xd2, 0x3b, 0x2c, 0x34, 0xec, 0xd8, 0xeb, 0x35, 0x96, 0x5f, 0xb2,
	0xc3, 0x8c, 0xf0, 0x4d, 0xaa, 0x5c, 0x5f, 0xff, 0x57, 0xa0, 0x6b, 0x1f, 0xdc, 0x2c, 0x5e, 0x0d,
	0xbe, 0xe6, 0xbe, 0x37, 0x9b, 0xfb, 0xde, 0xcf, 0xdc, 0xf7, 0x3e, 0x16, 0x7e, 0x65, 0xb6, 0xf0,
	0x2b, 0xdf, 0x0b, 0xbf, 0xf2, 0x74, 0x3a, 0x92, 0x66, 0x9c, 0xc7, 0xfd, 0x44, 0x4d, 0x43, 0xd7,
	0x66, 0x28, 0xce, 0x5c, 0xd3, 0xef, 0xae, 0xeb, 0xd0, 0x14, 0x19, 0xea, 0xb8, 0x69, 0x2b, 0xbf,
	0xf8, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x73, 0x0f, 0xdc, 0x07, 0x02, 0x00, 0x00,
}

func (m *Email) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Email) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Email) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreviousDecryptionKey) > 0 {
		i -= len(m.PreviousDecryptionKey)
		copy(dAtA[i:], m.PreviousDecryptionKey)
		i = encodeVarintEmail(dAtA, i, uint64(len(m.PreviousDecryptionKey)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.DecryptionKeys) > 0 {
		for iNdEx := len(m.DecryptionKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DecryptionKeys[iNdEx])
			copy(dAtA[i:], m.DecryptionKeys[iNdEx])
			i = encodeVarintEmail(dAtA, i, uint64(len(m.DecryptionKeys[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.SendedAt) > 0 {
		i -= len(m.SendedAt)
		copy(dAtA[i:], m.SendedAt)
		i = encodeVarintEmail(dAtA, i, uint64(len(m.SendedAt)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.TrackIds) > 0 {
		for iNdEx := len(m.TrackIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrackIds[iNdEx])
			copy(dAtA[i:], m.TrackIds[iNdEx])
			i = encodeVarintEmail(dAtA, i, uint64(len(m.TrackIds[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.ReplyTo) > 0 {
		i -= len(m.ReplyTo)
		copy(dAtA[i:], m.ReplyTo)
		i = encodeVarintEmail(dAtA, i, uint64(len(m.ReplyTo)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintEmail(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintEmail(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SenderAddressVersion != 0 {
		i = encodeVarintEmail(dAtA, i, uint64(m.SenderAddressVersion))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SenderSignature) > 0 {
		i -= len(m.SenderSignature)
		copy(dAtA[i:], m.SenderSignature)
		i = encodeVarintEmail(dAtA, i, uint64(len(m.SenderSignature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintEmail(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintEmail(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEmail(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEmail(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEmail(dAtA []byte, offset int, v uint64) int {
	offset -= sovEmail(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Email) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEmail(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEmail(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovEmail(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovEmail(uint64(l))
	}
	l = len(m.SenderSignature)
	if l > 0 {
		n += 1 + l + sovEmail(uint64(l))
	}
	if m.SenderAddressVersion != 0 {
		n += 1 + sovEmail(uint64(m.SenderAddressVersion))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovEmail(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovEmail(uint64(l))
	}
	l = len(m.ReplyTo)
	if l > 0 {
		n += 1 + l + sovEmail(uint64(l))
	}
	if len(m.TrackIds) > 0 {
		for _, s := range m.TrackIds {
			l = len(s)
			n += 1 + l + sovEmail(uint64(l))
		}
	}
	l = len(m.SendedAt)
	if l > 0 {
		n += 1 + l + sovEmail(uint64(l))
	}
	if len(m.DecryptionKeys) > 0 {
		for _, s := range m.DecryptionKeys {
			l = len(s)
			n += 1 + l + sovEmail(uint64(l))
		}
	}
	l = len(m.PreviousDecryptionKey)
	if l > 0 {
		n += 1 + l + sovEmail(uint64(l))
	}
	return n
}

func sovEmail(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEmail(x uint64) (n int) {
	return sovEmail(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Email) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Email: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Email: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddressVersion", wireType)
			}
			m.SenderAddressVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderAddressVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackIds = append(m.TrackIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptionKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecryptionKeys = append(m.DecryptionKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousDecryptionKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousDecryptionKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEmail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEmail(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEmail
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEmail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEmail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEmail
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEmail
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEmail
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEmail        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEmail          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEmail = fmt.Errorf("proto: unexpected end of group")
)
